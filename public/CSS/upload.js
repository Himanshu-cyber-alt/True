let result=document.getElementById("result");const imageUrls=[];async function uploadImages(){const e=document.getElementById("post_description").value.trim();if(!e)return void alert("Please enter a description.");result.innerHTML="<br><center> ...uploading... </center>";document.getElementById("uploadForm");console.log("fetching urls...");const n=document.getElementById("imageInput").files;if(n.length>0&&e){const e="528238665667c9452b7443b915ff2771",t="https://api.imgbb.com/1/upload";try{for(const o of n){const n=new FormData;n.append("image",o),n.append("key",e);const r=await fetch(t,{method:"POST",body:n});if(!r.ok)throw new Error("Network response was not OK");const a=await r.json();if(a.data&&a.data.url){const e=a.data.url;imageUrls.push(e)}else console.error("Error uploading image:",a);console.log("urls: ",imageUrls)}}catch(e){console.error("Error:",e)}}sendImageUrlsToServer(imageUrls)}function sendImageUrlsToServer(e){const n={title:document.getElementById("post_title").value,description:document.getElementById("post_description").value,images:e,caption:"",img_num:e.length};fetch("/upload",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)}).catch((e=>{console.error("Error:",e)})),result.innerHTML="<br><center> <b> ...uploaded successfully!... <b></center>"}let moreClk=!1;async function toggleBan(e,n){if("phenomenon"!==e)try{const n=await fetch("/admin/ban",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:e})}),t=await n.json();console.log(t.message),fetchAdminUsers()}catch(e){console.error("Error toggling ban:",e)}}async function fetchAdminUsers(){try{const e=await fetch("/admin/users"),n=await e.json(),t=document.getElementById("adminList");t.innerHTML="",n.forEach((e=>{const n=e.isBanned?"Unban":"Ban",o=e.isBanned?"unban":"ban",r=document.createElement("div");r.innerHTML=`\n                        <p>${e.username} - ${e.isBanned?"Banned":"Active"}</p>\n                        <button class="BanUnban" onclick="toggleBan('${e.username}', '${o}')">${n}</button>\n                        <hr>\n                    `,t.appendChild(r)}))}catch(e){console.error("Error fetching admin users:",e)}}async function logoutAllUsers(){}document.getElementById("MoreOpt").addEventListener("click",(()=>{moreClk?(document.getElementById("MoreDisplay").style.display="none",moreClk=!1):(document.getElementById("MoreDisplay").style.removeProperty("display"),moreClk=!0)})),fetchAdminUsers();let maintain=!1;function showMaintenancePage(){maintain?(document.querySelector(".Maintenance").innerHTML="maintain",maintain=!1):(document.querySelector(".Maintenance").innerHTML="no maintain",maintain=!0)}async function viewLogins(){try{const e=await fetch("/get-last-20-login-entries",{method:"POST",headers:{"Content-Type":"application/txt"}}),n=await e.text();document.getElementById("loginLogs").innerText=n}catch(e){console.error("Error finding entries:",e)}}async function viewLogouts(){try{const e=await fetch("/get-last-20-logout-entries",{method:"POST",headers:{"Content-Type":"application/txt"}}),n=await e.text();document.getElementById("logoutLogs").innerText=n}catch(e){console.error("Error finding entries:",e)}}
//! automatically logout user after 30mins
setTimeout((()=>{window.location.href="/logout"}),18e5);